data <- read.csv("X:\\akash\\PROJECTS\\Duda\\Scalogram_paper\\PS.csv", header = TRUE) #load data
extent <- c(81,	225,	441,	729,	1089,	3969,	8649,	15129,	23409,	33489,	45369,	59049,	74529,	91809)
extent <- data.frame(extent)
extent<-as.matrix(extent)
y <- data.frame(data[,37:50])
y<-as.matrix(y)
head(y)
# Function to plot variable values with polynomial trendline and show equation and Spearman coefficient
scalogram.plot_trendline <- function(variable, extent, degree) {
# Create x-values for scatterplot
x <- extent#seq_along(variable)
# Fit the polynomial trendline
poly_fit <- lm(variable ~ poly(x, degree, raw = TRUE))
# Get the predicted values
y_pred <- predict(poly_fit)
# Calculate Spearman coefficient
#spearman_coef <- cor(variable, x, method = "spearman")
# Calculate R-squared
rss <- sum(residuals(poly_fit)^2)
tss <- sum((variable - mean(variable))^2)
rsquared <- 1 - rss / tss
# Create the scatterplot
plot(x, variable, pch = 16, col = "blue", xlab = "Extent", ylab = "Value",
main = "Polynomial Trendline")
# Add polynomial trendline
x_seq <- seq(min(x), max(x), length.out = 100)
lines(x_seq, predict(poly_fit, newdata = data.frame(x = x_seq)), col = "red", lwd = 2)
# Coefficients of the polynomial equation
coefficients <- coef(poly_fit)
# Generate the equation string dynamically
equation <- "y ="
for (i in 1:(degree + 1)) {
equation <- paste0(equation, " +", round(coefficients[i], 20), "* x^", i - 1)
}
equation <- gsub("\\+\\-", "-", equation)  # Replace "+-" with "-"
print(equation)
# Calculate the position for displaying text in the middle of the plot
x_middle <- mean(range(x))
y_middle <- mean(range(variable))
# Set the vertical offset for each text annotation
equation_offset <- 0.5
rsquared_offset <- 1
# Add trendline equation and Spearman coefficient
#text(mean(x), max(variable), paste("Equation:", equation), pos = 4)
text(mean(x), max(variable)-((max(variable)-min(variable))/length(variable)), paste("R-squared:", round(rsquared, 4)), pos = 4)
}
#, max(x), max(variable),
degree <- 3                     # Replace with the desired polynomial degree
scalogram.plot_trendline(y[6,],extent, degree)
################################################################
#####  10. Intercept of 1st derivative
################################################################
# Function to calculate first derivative for each row using polynomial fitting
scalogram.intercept <- function(row, degree) {
fitted_curve <- lm(row ~ poly(seq_along(row), degree, raw = TRUE))
derivative <- diff(coef(fitted_curve)[1:(degree + 1)]) * factorial(degree)
return(derivative[1])  ##[1] is the intercept
}
# Apply the function to each row
intercept <- apply(y, 1, scalogram.intercept, degree)
intercept
deriv <- scalogram.first_derivative(data[1,], extent, 3)
library(Scalogram)
deriv <- scalogram.first_derivative(data[1,], extent, 3)
data[1,]
head(y)
deriv <- scalogram.first_derivative(y[1,], extent, 3)
fitted_curve <- lm(deriv ~ poly(extent, degree = degree, raw = TRUE))
coefficients <- coef(fitted_curve)
poly_eq <- function(x) {
y <- (as.double(coefficients[[1]])) + (as.double(coefficients[[2]])) * x^1 +
(as.double(coefficients[[3]])) * x^2 + (as.double(coefficients[[4]]))
return(y)
}
x <- seq(min(extent), max(extent), length.out = 100001)  # by = 1)
y <- poly_eq(x)
intersection <- x[which(diff(sign(y)) != 0)]
intersection
intersection <- x[which(diff(sign(x)) != 0)]
intersection
intersection <- x[which(diff(sign(y)) != 0)]
intersection
x
y
intersection <- y[which(diff(sign(x)) != min(extent))]
intersection
deriv <- scalogram.first_derivative(y[1,], extent, 3)
y[1,]
y <- data.frame(data[,37:50])
y<-as.matrix(y)
deriv <- scalogram.first_derivative(y[1,], extent, 3)
fitted_curve <- lm(deriv ~ poly(extent, degree = 3, raw = TRUE))
coefficients <- coef(fitted_curve)
poly_eq <- function(x) {
y <- (as.double(coefficients[[1]])) + (as.double(coefficients[[2]])) * x^1 +
(as.double(coefficients[[3]])) * x^2 + (as.double(coefficients[[4]]))
return(y)
}
cat("critical Points: ",intersection[1])
plot(poly_eq, from = min(area), to = max(area), xlab = "x", ylab = "y")
plot(poly_eq, from = min(extent), to = max(extent), xlab = "x", ylab = "y")
intersection[1]
points(intersection[1], poly_eq(intersection[1]), col = "red", pch = 16)
abline(a = 0, b = 0, col = "green")
library(Scalogram)
knitr::opts_chunk$set(echo = TRUE)
library(raster)
library(sf)
library(Scalogram)
raster <-raster("X:\\akash\\PROJECTS\\Duda\\data\\all_data\\MOD_CumDHI_GCS.tif")
# Load the shapefile
shapefile_file <- "X:\\akash\\PROJECTS\\Duda\\data\\all_data\\Plots.shp"
shapefile <- st_read(shapefile_file)
plot(raster)
plot(shapefile, add = TRUE)   # shapefile[,1]
extent <- c(3,5,7,9,11,21,31,41,51,61,71,81,91,101)
data <- scalogram.extract_by_extent("X:\\akash\\PROJECTS\\Duda\\data\\all_data\\MOD_CumDHI_GCS.tif", "X:\\akash\\PROJECTS\\Duda\\data\\all_data\\Plots.shp", extent)
head(data)
area<-extent^2*(3*3)
area
#extent <- data.frame(extent)
area<-as.matrix(data.frame(area))
#y <- data.frame(data[,37:50])
data<-as.matrix(data)
scalogram.plot_trendline(data[1,],area,degree=3)   # y[1,] means for point 1
deriv <- scalogram.first_derivative(data[1,],area,3)  # Row 1: data[1,]
#plot(area,deriv )
plot(area,deriv, type = "p", pch = 16, col = "blue", ylim = c(min(deriv), max(deriv)), xlab = "Area", ylab = "1st Derivative")
# Add a line plot
lines(area,deriv, type = "l", col = "red", lwd = 2)
# Add labels for the points
#text(area,deriv, labels = deriv, col = "black")
critical_points <- scalogram.critical_points(data, area, degree=3)
head(critical_points)
deriv <- scalogram.first_derivative(data[1,], area, 3)
fitted_curve <- lm(deriv ~ poly(area, degree = 3, raw = TRUE))
coefficients <- coef(fitted_curve)
poly_eq <- function(x) {
y <- (as.double(coefficients[[1]])) + (as.double(coefficients[[2]])) * x^1 +
(as.double(coefficients[[3]])) * x^2 + (as.double(coefficients[[4]]))
return(y)
}
cat("critical Points: ",critical_points[1,])
plot(poly_eq, from = min(area), to = max(area), xlab = "x", ylab = "y")
points(critical_points[1,], poly_eq(critical_points[1,]), col = "red", pch = 16)
abline(a = 0, b = 0, col = "green")
intercept_derivative <- array()
for (i in 1:nrow(data)) {
row <- data[i, ]
# Perform operations on the row
# Access individual elements using row$column_name or row[["column_name"]]
value <- scalogram.intercept(row,3)
# Store the value in the list
intercept_derivative[i] <- value
}
area
for (i in 1:nrow(data)) {
row <- data[i, ]
# Perform operations on the row
# Access individual elements using row$column_name or row[["column_name"]]
value <- scalogram.intercept(row,area,3)
# Store the value in the list
intercept_derivative[i] <- value
}
x
deriv <- scalogram.first_derivative(y[1,], extent, 3)
data <- read.csv("X:\\akash\\PROJECTS\\Duda\\Scalogram_paper\\PS.csv", header = TRUE) #load data
extent <- c(81,	225,	441,	729,	1089,	3969,	8649,	15129,	23409,	33489,	45369,	59049,	74529,	91809)
extent <- data.frame(extent)
extent<-as.matrix(extent)
y <- data.frame(data[,37:50])
y<-as.matrix(y)
deriv <- scalogram.first_derivative(y[1,], extent, 3)
fitted_curve <- lm(deriv ~ poly(extent, degree = degree, raw = TRUE))
###################################################################
degree<-3
fitted_curve <- lm(deriv ~ poly(extent, degree = degree, raw = TRUE))
coefficients <- coef(fitted_curve)
poly_eq <- function(x) {
y <- (as.double(coefficients[[1]])) + (as.double(coefficients[[2]])) * x^1 +
(as.double(coefficients[[3]])) * x^2 + (as.double(coefficients[[4]]))
return(y)
}
x1 <- seq(min(extent), max(extent), length.out = 100001)  # by = 1)
y1 <- poly_eq(x)
library(Scalogram)
knitr::opts_chunk$set(echo = TRUE)
library(raster)
library(sf)
library(Scalogram)
raster <-raster("X:\\akash\\PROJECTS\\Duda\\data\\all_data\\MOD_CumDHI_GCS.tif")
# Load the shapefile
shapefile_file <- "X:\\akash\\PROJECTS\\Duda\\data\\all_data\\Plots.shp"
shapefile <- st_read(shapefile_file)
plot(raster)
plot(shapefile, add = TRUE)   # shapefile[,1]
extent <- c(3,5,7,9,11,21,31,41,51,61,71,81,91,101)
data <- scalogram.extract_by_extent("X:\\akash\\PROJECTS\\Duda\\data\\all_data\\MOD_CumDHI_GCS.tif", "X:\\akash\\PROJECTS\\Duda\\data\\all_data\\Plots.shp", extent)
head(data)
area<-extent^2*(3*3)
area
#extent <- data.frame(extent)
area<-as.matrix(data.frame(area))
#y <- data.frame(data[,37:50])
data<-as.matrix(data)
#extent <- data.frame(extent)
area<-as.matrix(data.frame(area))
#y <- data.frame(data[,37:50])
data<-as.matrix(data)
scalogram.plot_trendline(data[1,],area,degree=3)   # y[1,] means for point 1
deriv <- scalogram.first_derivative(data[1,],area,3)  # Row 1: data[1,]
#plot(area,deriv )
plot(area,deriv, type = "p", pch = 16, col = "blue", ylim = c(min(deriv), max(deriv)), xlab = "Area", ylab = "1st Derivative")
# Add a line plot
lines(area,deriv, type = "l", col = "red", lwd = 2)
# Add labels for the points
#text(area,deriv, labels = deriv, col = "black")
critical_points <- scalogram.critical_points(data, area, degree=3)
head(critical_points)
deriv <- scalogram.first_derivative(data[1,], area, 3)
fitted_curve <- lm(deriv ~ poly(area, degree = 3, raw = TRUE))
coefficients <- coef(fitted_curve)
poly_eq <- function(x) {
y <- (as.double(coefficients[[1]])) + (as.double(coefficients[[2]])) * x^1 +
(as.double(coefficients[[3]])) * x^2 + (as.double(coefficients[[4]]))
return(y)
}
cat("critical Points: ",critical_points[1,])
plot(poly_eq, from = min(area), to = max(area), xlab = "x", ylab = "y")
points(critical_points[1,], poly_eq(critical_points[1,]), col = "red", pch = 16)
abline(a = 0, b = 0, col = "green")
intercept_derivative <- array()
for (i in 1:nrow(data)) {
row <- data[i, ]
# Perform operations on the row
# Access individual elements using row$column_name or row[["column_name"]]
value <- scalogram.intercept(row,3)
# Store the value in the list
intercept_derivative[i] <- value
}
row
intercept_derivative <- array()
for (i in 1:nrow(data)) {
row <- data[i, ]
# Perform operations on the row
# Access individual elements using row$column_name or row[["column_name"]]
value <- scalogram.intercept(row,area,3)
# Store the value in the list
intercept_derivative[i] <- value
}
print(intercept_derivative)
deriv <- scalogram.first_derivative(data[1,], area, 3)
fitted_curve <- lm(deriv ~ poly(area, degree = 3, raw = TRUE))
coefficients <- coef(fitted_curve)
poly_eq <- function(x) {
y <- (as.double(coefficients[[1]])) + (as.double(coefficients[[2]])) * x^1 +
(as.double(coefficients[[3]])) * x^2 + (as.double(coefficients[[4]]))
return(y)
}
cat("critical Points: ",intersection[1])
x1 <- seq(min(area), max(area), length.out = 100001)  # by = 1)
y1 <- poly_eq(x1)
intersection <- y1[which(diff(sign(x1)) != min(extent))]
cat("critical Points: ",intersection[1])
plot(poly_eq, from = min(extent), to = max(extent), xlab = "x", ylab = "y")
points(intersection[1], poly_eq(intersection[1]), col = "red", pch = 16)
points(intersection[1], poly_eq(intersection[1]), col = "red", pch = 16)
deriv <- scalogram.first_derivative(data[1,], area, 3)
fitted_curve <- lm(deriv ~ poly(area, degree = 3, raw = TRUE))
coefficients <- coef(fitted_curve)
poly_eq <- function(x) {
y <- (as.double(coefficients[[1]])) + (as.double(coefficients[[2]])) * x^1 +
(as.double(coefficients[[3]])) * x^2 + (as.double(coefficients[[4]]))
return(y)
}
x1 <- seq(min(area), max(area), length.out = 100001)  # by = 1)
y1 <- poly_eq(x1)
intersection <- y1[which(diff(sign(x1)) != min(extent))]
cat("critical Points: ",intersection[1])
plot(poly_eq, from = min(extent), to = max(extent), xlab = "x", ylab = "y")
points(intersection[1], poly_eq(intersection[1]), col = "red", pch = 16)
abline(a = 0, b = 0, col = "green")
deriv <- scalogram.first_derivative(y[1,], extent, 3)
fitted_curve <- lm(deriv ~ poly(extent, degree = 3, raw = TRUE))
coefficients <- coef(fitted_curve)
poly_eq <- function(x) {
y <- (as.double(coefficients[[1]])) + (as.double(coefficients[[2]])) * x^1 +
(as.double(coefficients[[3]])) * x^2 + (as.double(coefficients[[4]]))
return(y)
}
cat("critical Points: ",intersection[1])
plot(poly_eq, from = min(extent), to = max(extent), xlab = "x", ylab = "y")
points(intersection[1], poly_eq(intersection[1]), col = "red", pch = 16)
abline(a = 0, b = 0, col = "green")
deriv <- scalogram.first_derivative(data[1,], area, 3)
fitted_curve <- lm(deriv ~ poly(area, degree = 3, raw = TRUE))
coefficients <- coef(fitted_curve)
poly_eq <- function(x) {
y <- (as.double(coefficients[[1]])) + (as.double(coefficients[[2]])) * x^1 +
(as.double(coefficients[[3]])) * x^2 + (as.double(coefficients[[4]]))
return(y)
}
x1 <- seq(min(area), max(area), length.out = 100001)  # by = 1)
y1 <- poly_eq(x1)
intersection <- y1[which(diff(sign(x1)) != min(area))]
cat("critical Points: ",intersection[1])
plot(poly_eq, from = min(area), to = max(area), xlab = "x", ylab = "y")
points(intersection[1], poly_eq(intersection[1]), col = "red", pch = 16)
abline(a = 0, b = 0, col = "green")
deriv <- scalogram.first_derivative(data[1,], area, 3)
fitted_curve <- lm(deriv ~ poly(area, degree = 3, raw = TRUE))
coefficients <- coef(fitted_curve)
poly_eq <- function(x) {
y <- (as.double(coefficients[[1]])) + (as.double(coefficients[[2]])) * x^1 +
(as.double(coefficients[[3]])) * x^2 + (as.double(coefficients[[4]]))
return(y)
}
x1 <- seq(min(area), max(area), length.out = 100001)  # by = 1)
y1 <- poly_eq(x1)
intersection <- y1[which(diff(sign(x1)) != min(area))]
cat("critical Points: ",intersection[1])
plot(poly_eq, from = min(area), to = max(area), xlab = "x", ylab = "y")
points(intersection[1], poly_eq(intersection[1]), col = "red", pch = 16)
#abline(a = 0, b = 0, col = "green")
library(Scalogram)
library(Scalogram)
library(Scalogram)
library(Scalogram)
devtools::load_all(".")
library(Scalogram)
